#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -eo pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_KEYRING_FILE="$BUILD_DIR/apt-trusted.gpg"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p "$APT_STATE_DIR/mirrors/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

if [[ -f $BUILD_DIR/Aptfile.sources ]]; then
  APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$BUILD_DIR/Aptfile.sources"
fi

if [[ -f $BUILD_DIR/Aptfile.pubkeys ]]; then
  cp /etc/apt/trusted.gpg "$APT_KEYRING_FILE" 2>/dev/null || true
  APT_OPTIONS="$APT_OPTIONS -o dir::etc::trusted=$APT_KEYRING_FILE"

  cat $BUILD_DIR/Aptfile.pubkeys | while read KEYSERVER KEYID; do
    apt-key --keyring "$APT_KEYRING_FILE" adv --keyserver $KEYSERVER --recv-keys $KEYID
  done
fi

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --no-install-recommends --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

mkdir -p $BUILD_DIR/.profile.d

if [[ -f $BUILD_DIR/Aptfile.locales ]]; then
  mkdir -p $BUILD_DIR/.apt/usr/lib/locale

  cat $BUILD_DIR/Aptfile.locales | while read LOCALE CHARSET; do
    INPUT=`echo $LOCALE | sed 's/\([^.]*\)[^@]*\(.*\)/\1\2/'`
    topic "Generating locale $LOCALE"
    localedef -i $INPUT -c -f $CHARSET $BUILD_DIR/.apt/usr/lib/locale/$LOCALE
  done
  
  cat <<EOF >$BUILD_DIR/.profile.d/001_locale.sh
export LOCPATH="\$HOME/.apt/usr/lib/locale"
EOF

  export LOCPATH="$BUILD_DIR/.apt/usr/lib/locale"
fi

topic "Writing profile script"
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$HOME/.apt/usr/sbin:\$HOME/.apt/sbin:\$HOME/.apt/usr/local/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$HOME/.apt/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$HOME/.apt/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/sbin:$BUILD_DIR/.apt/sbin:$BUILD_DIR/.apt/usr/local/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$BUILD_DIR/.apt/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$BUILD_DIR/.apt/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH|LOCPATH)='  > "$LP_DIR/export"
